package callbacks

import (
	"errors"
	"fmt"
	"ghost-approve/internal/repositories"
	"ghost-approve/internal/services"
	"ghost-approve/internal/utils"
	"ghost-approve/pkg/botErrors"
	"ghost-approve/pkg/vkbot"
	botgolang "github.com/mail-ru-im/bot-golang"
	"gorm.io/gorm"
	"log"
)

// handleConfirmCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç confirm_* –∫–æ–º–∞–Ω–¥—ã
func handleConfirmCallback(p *botgolang.EventPayload, data string) {
	approveID, v, err := utils.ParseFileInfo(data)
	if err != nil {
		log.Println(err)
		return
	}

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID: %s –≤ int: %v", approveID, err)
	}

	err = services.ConfirmApprove(approveID, v, p.From.ID)
	if errors.Is(err, gorm.ErrRecordNotFound) {
		err = vkbot.GetBot().NewTextMessage(p.From.ID, "–ê–ø—Ä—É–≤ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω").Send()
		log.Println(err)
	}
	if errors.Is(err, botErrors.ErrAlreadyHasResponse) {
		err = vkbot.GetBot().NewTextMessage(p.From.ID, "–¢—ã —É–∂–µ –¥–∞–ª –æ—Ç–∫–ª–∏–∫ –ø–æ —ç—Ç–æ–º—É –∞–ø—Ä—É–≤—É").Send()
	}

	if errors.Is(err, botErrors.ErrNoAccess) {
		err = vkbot.GetBot().NewTextMessage(p.From.ID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–ø—Ä—É–≤—É").Send()
		log.Println(err)
	}

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %v", err)
	}

}

func CheckAndConfirm(p *botgolang.EventPayload, fileInfo *services.FileInfo) {
	var fileID string
	var ok bool
	for _, pts := range p.Parts {
		if pts.Type == botgolang.FILE {
			fileID = pts.Payload.FileID
			ok = true
		}
	}
	if !ok {
		message := vkbot.GetBot().NewTextMessage(p.From.ID, "–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—à–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç —Ñ–∞–π–ª–∞, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ")
		if err := message.Send(); err != nil {
			log.Printf("failed to send message: %s", err)
		}
		return
	}

	//–Ω–µ —Ç—Ä–æ–≥–∞—Ç—å, –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ
	file, err := repositories.FileByApprovalID(fileInfo.ApproveID)

	if err != nil {
		log.Println(err)
	}

	err = services.UploadFileWithLock(fileInfo.ApproveID, fileInfo.Version+1, p.From.ID, fileID)

	if errors.Is(err, botErrors.FileLockedError) {
		file, err = repositories.FileByApprovalID(fileInfo.ApproveID)
		if err != nil {
			log.Println("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
		}
		message := vkbot.GetBot().NewMessage(p.From.ID)
		message.Text = "–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π  —Å–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞, –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –µ–≥–æ. \n" +
			"–ü—Ä–∏–∫—Ä–µ–ø–∏–ª –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ üëª\n" +
			"–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ñ–∞–π–ª, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å'"
		message.FileID = file.FileID

		fileInfo.Version = file.Version

		not := botgolang.NewCallbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "/waitFile_cancel").WithStyle(botgolang.ButtonAttention)
		keyboard := botgolang.NewKeyboard()
		keyboard.AddRow(not)
		message.AttachInlineKeyboard(keyboard)
		if err := message.Send(); err != nil {
			log.Printf("failed to send message: %s", err)
		}
		return
	}
	if errors.Is(err, botErrors.ErrNoAccess) {
		vkbot.GetBot().NewTextMessage(p.From.ID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–ø—Ä—É–≤—É").Send()
		return
	}
	if errors.Is(err, gorm.ErrRecordNotFound) {
		vkbot.GetBot().NewTextMessage(p.From.ID, "–ê–ø—Ä—É–≤ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω").Send()
		return
	}
	if errors.Is(err, botErrors.ErrAlreadyHasResponse) {
		err = vkbot.GetBot().NewTextMessage(p.From.ID, "–¢—ã —É–∂–µ –¥–∞–ª –æ—Ç–∫–ª–∏–∫ –ø–æ —ç—Ç–æ–º—É –∞–ø—Ä—É–≤—É").Send()
		return
	}
	if err != nil {
		log.Println(err)
	}

	err = vkbot.GetBot().NewTextMessage(p.From.ID, fmt.Sprintf("–ê–ø—Ä—É–≤ #%d –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", fileInfo.ApproveID)).Send()

	return
}
