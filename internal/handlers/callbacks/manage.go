package callbacks

import (
	"errors"
	"fmt"
	"ghost-approve/internal/notifier"
	"ghost-approve/internal/repositories"
	"ghost-approve/internal/services"
	"ghost-approve/pkg/vkbot"
	botgolang "github.com/mail-ru-im/bot-golang"
	"gorm.io/gorm"
	"log"
	"strconv"
	"strings"
	"sync"
)

func handleManageCommand(data string, userID string) {
	command := strings.TrimPrefix(data, "/manage_")
	if command == "approves" {
		services.SendManageApprovals(userID)
		return
	}
	if command == "reports" {
		var err error
		messages, err := services.ReportsApprovalsByUserID(userID)
		if err != nil {
			return
		}

		//–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã
		var wg sync.WaitGroup
		for _, message := range messages {
			messageCopy := message
			wg.Add(1)
			go func(msg *botgolang.Message) {
				defer wg.Done()
				err := msg.Send()
				if err != nil {
					log.Println(err)
				}
			}(messageCopy)
		}
		wg.Wait()

		return
	}

	//—Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
	if strings.HasPrefix(command, "notification_") {
		approveID, err := strconv.Atoi(strings.TrimPrefix(command, "notification_"))
		if err != nil {
			log.Println(err)
			return
		}
		isCurrent, err := services.IsCurrentApprove(approveID)
		if !isCurrent {
			err = vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf("–ê–ø—Ä—É–≤ #%d —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω", approveID)).Send()
			if err != nil {
				log.Println(err)
			}
			return
		}
		users, err := repositories.ApprovalParticipants(approveID)
		if err != nil {
			log.Println(err)
			return
		}

		err = notifier.CustomRemind(userID, users, approveID)
		if err != nil {
			log.Println(err)
		}

	}
	if strings.HasPrefix(command, "report_") {
		approveID, err := strconv.Atoi(strings.TrimPrefix(command, "report_"))
		if err != nil {
			log.Println(err)
			return
		}
		message, err := services.ReportMessage(approveID, userID)
		if message == nil || err != nil {
			err = vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf("–ê–ø—Ä—É–≤ #%d –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω", approveID)).Send()
			if err != nil {
				log.Println(err)
			}
			return
		}
		err = message.Send()
		if err != nil {
			log.Println(err)
		}

	}
	if strings.HasPrefix(command, "statistic_") {
		approveID, err := strconv.Atoi(strings.TrimPrefix(command, "statistic_"))
		if access, err := services.CheckApprovalAccess(approveID, userID); !access || err != nil {
			vkbot.GetBot().NewTextMessage(userID, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∞–ø—Ä—É–≤—É").Send()
			return
		}
		if err != nil {
			log.Println(err)
			return
		}
		message := vkbot.GetBot().NewMessage(userID)
		message.Text += fmt.Sprintf("üìäC—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ø—Ä—É–≤–∞ #%d\n", approveID)
		message.Text += services.FetchStats(approveID)
		err = message.Send()
		if err != nil {
			log.Println(err)
		}
	}
	if strings.HasPrefix(command, "events_") {
		approveID, err := strconv.Atoi(strings.TrimPrefix(command, "events_"))
		if err != nil {
			log.Println(err)
			return
		}
		if access, err := services.CheckApprovalAccess(approveID, userID); !access || err != nil {
			vkbot.GetBot().NewTextMessage(userID, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∞–ø—Ä—É–≤—É").Send()
			return
		}
		message := vkbot.GetBot().NewMessage(userID)
		text, err := services.FetchEvents(approveID)
		if errors.Is(gorm.ErrRecordNotFound, err) {
			vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf("–ê–ø—Ä—É–≤ #%d –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω", approveID))
		}
		message.Text += fmt.Sprintf("üïó–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–ø—Ä—É–≤–∞ #%d\n", approveID)
		message.Text += text
		err = message.Send()
		if err != nil {
			log.Println(err)
		}
	}
	if strings.HasPrefix(command, "hide_") {
		approveID, err := strconv.Atoi(strings.TrimPrefix(command, "hide_"))
		if err != nil {
			log.Println(err)
			return
		}
		err = repositories.HideReportForUser(userID, approveID)
		if err != nil {
			log.Println(err)
		}
		err = vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf("–ê–ø—Ä—É–≤ #%d –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ—Ç—á–µ—Ç–∞—Ö. –ê–≤—Ç–æ—Ä –∞–ø—Ä—É–≤–∞ –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –æ—Ç—á–µ—Ç—É.", approveID)).Send()
		if err != nil {
			log.Println(err)
		}
	}
	if strings.HasPrefix(command, "cancel_") {
		approveID, err := strconv.Atoi(strings.TrimPrefix(command, "cancel_"))
		if err != nil {
			log.Println(err)
			return
		}

		isCurrent, err := services.IsCurrentApprove(approveID)
		if !isCurrent {
			err := vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf("–ê–ø—Ä—É–≤ #%d —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω", approveID)).Send()
			if err != nil {
				log.Println(err)
			}
			return
		}

		message := vkbot.GetBot().NewMessage(userID)
		text := fmt.Sprintf("–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –∞–ø—Ä—É–≤ #%d? –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∞–ø—Ä—É–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω —Ç–æ–±–æ–π", approveID)
		keyboard := botgolang.NewKeyboard()
		yes := botgolang.NewCallbackButton("–î–∞", fmt.Sprintf("/manage_delete_%d", approveID)).WithStyle(botgolang.ButtonAttention)
		no := botgolang.NewCallbackButton("–ù–µ—Ç", fmt.Sprintf("/manage_notDelete_%d", approveID))

		keyboard.AddRow(yes, no)
		message.AttachInlineKeyboard(keyboard)
		message.Text = text
		err = message.Send()
		if err != nil {
			log.Println(err)
		}
	}
	if strings.HasPrefix(command, "delete_") {
		approveID, err := strconv.Atoi(strings.TrimPrefix(command, "delete_"))

		if err != nil {
			log.Println(err)
			return
		}

		isCurrent, err := services.IsCurrentApprove(approveID)
		if !isCurrent {
			err := vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf("–ê–ø—Ä—É–≤ #%d —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω", approveID)).Send()
			if err != nil {
				log.Println(err)
			}
			return
		}
		err = services.CancelApprove(approveID)
		if err != nil {
			log.Println(err)
			return
		}

		err = services.CancelMessageToUsers(approveID, userID)
		if err != nil {
			log.Println(err)
		}

		err = vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf("–ê–ø—Ä—É–≤ #%d –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –µ—Å–ª–∏ –≤–≤–µ—Å—Ç–∏ /report%d", approveID, approveID)).Send()
		if err != nil {
			log.Println(err)
		}
	}
	if strings.HasPrefix(command, "ask_dreport") {
		approveID, err := strconv.Atoi(strings.TrimPrefix(command, "ask_dreport_"))
		if err != nil {
			log.Println(err)
			return
		}

		_, err = repositories.GetApprovalByID(approveID)
		if err != nil {
			err = vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf("–ê–ø—Ä—É–≤ #%d —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω", approveID)).Send()
			if err != nil {
				log.Println(err)
			}
			return
		}

		message := vkbot.GetBot().NewMessage(userID)
		message.Text = fmt.Sprintf("–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∞–ø—Ä—É–≤ #%d?", approveID)
		keyboard := botgolang.NewKeyboard()
		yes := botgolang.NewCallbackButton("–î–∞", fmt.Sprintf("/manage_dreport_%d", approveID)).WithStyle(botgolang.ButtonAttention)
		no := botgolang.NewCallbackButton("–ù–µ—Ç", fmt.Sprintf("/manage_notDelete_%d", approveID))
		keyboard.AddRow(yes, no)
		message.AttachInlineKeyboard(keyboard)
		err = message.Send()
		if err != nil {
			log.Println(err)
		}
	}
	if strings.HasPrefix(command, "dreport_") {
		approveID, err := strconv.Atoi(strings.TrimPrefix(command, "dreport_"))
		if err != nil {
			log.Println(err)
			return
		}
		_, err = repositories.GetApprovalByID(approveID)
		if err != nil {
			err = vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf("–ê–ø—Ä—É–≤ #%d —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω", approveID)).Send()
			if err != nil {
				log.Println(err)
			}
			return
		}
		err = repositories.DeleteApprovalByID(approveID)
		if err != nil {
			err = vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–ø—Ä—É–≤ #%d", approveID)).Send()
		}
		err = vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf(" –ê–ø—Ä—É–≤ #%d –±—ã–ª —É–¥–∞–ª–µ–Ω", approveID)).Send()

	}
	if strings.HasPrefix(command, "notDelete_") {
		approveID, err := strconv.Atoi(strings.TrimPrefix(command, "notDelete_"))
		if err != nil {
			log.Println(err)
			return
		}

		if vkbot.GetBot().NewTextMessage(userID, fmt.Sprintf("–ê–ø—Ä—É–≤ #%d –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω", approveID)).Send(); err != nil {
			log.Println(err)
		}
		return
	}
}
