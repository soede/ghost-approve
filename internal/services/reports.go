package services

import (
	"errors"
	"fmt"
	"ghost-approve/internal/models"
	"ghost-approve/internal/repositories"
	"ghost-approve/internal/utils"
	"ghost-approve/pkg/botErrors"
	"ghost-approve/pkg/db/postgres"
	"ghost-approve/pkg/vkbot"
	botgolang "github.com/mail-ru-im/bot-golang"
	log "github.com/sirupsen/logrus"
	"gorm.io/gorm"
	"sort"
	"strings"
	"time"
)

// ReportsApprovalsByUserID ‚Äì –≤–µ—Ä–Ω–µ—Ç –∞–ø—Ä—É–≤—ã –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
func ReportsApprovalsByUserID(authorID string) ([]*botgolang.Message, error) {
	var messages []*botgolang.Message
	approvals, err := repositories.EndApprovalsByUserID(authorID)
	if errors.Is(err, botErrors.NotFoundApprovalsForReports) {
		messages = append(messages, vkbot.GetBot().NewTextMessage(authorID, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤—Ä–µ—à–µ–Ω–Ω—ã—Ö –∞–ø—Ä—É–≤–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"))
		return messages, nil
	}
	if err != nil {
		log.Error(err)
		return nil, err
	}

	for _, approval := range *approvals {
		message := vkbot.GetBot().NewTextMessage(authorID, generateEndApprovalText(approval.ID, approval.Title, approval.Status, approval.CreatedAt))
		keyboard := botgolang.NewKeyboard()
		getReport := botgolang.NewCallbackButton("üìÑ–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç", fmt.Sprintf("/manage_report_%d", approval.ID))
		deleteReport := botgolang.NewCallbackButton("üóëÔ∏è–£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç", fmt.Sprintf("/manage_ask_dreport_%d", approval.ID)).WithStyle(botgolang.ButtonAttention)
		keyboard.AddRow(getReport, deleteReport)
		message.AttachInlineKeyboard(keyboard)

		messages = append(messages, message)
	}

	return messages, nil

}

// –≤–µ—Ä–Ω–µ—Ç–µ
func ReportMessage(approvalID int, authorID string) (message *botgolang.Message, err error) {
	message = vkbot.GetBot().NewMessage(authorID)
	approval, err := repositories.GetApprovalByID(approvalID)
	events, err := FetchEvents(approvalID)
	if err != nil {
		return nil, err
	}
	stats, err := CollectStats(approvalID)
	if err != nil {
		return nil, err
	}
	message.Text += fmt.Sprintf("–û—Ç—á–µ—Ç –ø–æ –∞–ø—Ä—É–≤—É #%d\n", approvalID)
	message.Text += "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
	message.Text += ReportApprovalText(approval) + "\n\n"
	message.Text += stats
	message.Text += "\n–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π\n"
	message.Text += events

	return

}

func generateEndApprovalText(ID int, title string, status models.ApproveStatus, createdAt time.Time) (text string) {
	text += fmt.Sprintf("–ê–ø—Ä—É–≤ #%d\n", ID)
	text += fmt.Sprintf("–ó–∞–≥–æ–ª–æ–≤–æ–∫: %s\n", title)

	months := []string{
		"—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω",
		"–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫",
	}
	ca := createdAt
	text += fmt.Sprintf("\n–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %02d %s %02d:%02d\n",
		ca.Day(), months[ca.Month()-1], ca.Hour(), ca.Minute())

	text += fmt.Sprintf("–°—Ç–∞—Ç—É—Å: %s", status)
	return
}

func FormatReport(events []EventElement) string {
	if len(events) == 0 {
		return ""
	}

	sort.Slice(events, func(i, j int) bool {
		return events[i].Created.Before(events[j].Created)
	})

	var result string
	var currentDate string

	for _, event := range events {
		month := utils.Months[event.Created.Month()]
		dateKey := fmt.Sprintf("%d–≥–æ–¥, %02d %s", event.Created.Year(), event.Created.Day(), month)

		if dateKey != currentDate {
			if currentDate != "" {
				result += "\n"
			}
			currentDate = dateKey
			result += dateKey + ":\n"
		}

		eventTime := event.Created.Format("15:04")
		result += fmt.Sprintf("    %s ‚Äì %s\n", eventTime, event.Text)
	}

	return result
}

// FetchEvents ‚Äì —Å–æ–±–∏—Ä–∞–µ—Ç –∏–≤–µ–Ω—Ç—ã
func FetchEvents(approveID int) (string, error) {
	var err error
	var text string

	approval, err := repositories.GetApprovalByID(approveID)
	if errors.Is(gorm.ErrRecordNotFound, err) || approval == nil {
		return "", gorm.ErrRecordNotFound

	}
	if err != nil {
		return "", err
	}
	file, err := repositories.FileByApprovalID(approveID)
	var fileURL string
	if file != nil && err == nil {
		fileURL, err = utils.FileUrlByID(file.OriginalFileID)
		if err != nil {
			log.Error(err)
		}
	}

	if err != nil {
		log.Error(err)
	}
	var events []EventElement

	if err != nil {
		return "", errors.New("–ê–ø—Ä—É–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
	if err != nil {
		log.Error(err)
	}
	if approval.Editable && file != nil {
		events = append(events, EventElement{
			Created: approval.CreatedAt,
			Text:    fmt.Sprintf("üìÑ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å–æ–∑–¥–∞–ª –∞–ø—Ä—É–≤ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º —Ñ–∞–π–ª–æ–º \n        üîó–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: %s", utils.CreateUserLink([]string{approval.AuthorID}), fileURL)})
	}
	if !approval.Editable && file != nil {
		events = append(events, EventElement{
			Created: approval.CreatedAt,
			Text:    fmt.Sprintf("üìÑ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å–æ–∑–¥–∞–ª –∞–ø—Ä—É–≤ —Å —Ñ–∞–π–ª–æ–º \n        üîó–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: %s", utils.CreateUserLink([]string{approval.AuthorID}), fileURL)})
	}
	if !approval.Editable && file == nil {
		events = append(events, EventElement{
			Created: approval.CreatedAt,
			Text:    fmt.Sprintf("üìÑ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å–æ–∑–¥–∞–ª –∞–ø—Ä—É–≤", utils.CreateUserLink([]string{approval.AuthorID}))})
	}

	if approval.Editable {
		approved, err := repositories.GetFileHistoriesByID(approveID)
		if err != nil {
			log.Error(err)
		}

		for _, el := range *approved {
			url, err := utils.FileUrlByID(el.FileID)
			if err != nil {
				log.Error(err)
			}

			events = append(events, EventElement{
				Created: el.UploadedAt,
				Text:    fmt.Sprintf("üìù–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞–ø—Ä—É–≤ –∏ –∑–∞–≥—Ä—É–∑–∏–ª –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª (–≤–µ—Ä—Å–∏—è %d) \n        üîó–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: %s", utils.CreateUserLink([]string{el.UploaderID}), el.Version, url)})
		}
	}

	if !approval.Editable {
		approved, err := repositories.ApprovedUsers(approveID)
		if err != nil {
			log.Error(err)
		}

		for _, el := range *approved {
			events = append(events, EventElement{
				Created: el.CreatedAt,
				Text:    fmt.Sprintf("‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞–ø—Ä—É–≤", utils.CreateUserLink([]string{el.UserID}))})
		}
	}

	rejected, err := repositories.RejectedUsers(approveID)
	for _, el := range *rejected {
		events = append(events, EventElement{
			Created: el.CreatedAt,
			Text:    fmt.Sprintf("‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫–ª–æ–Ω–∏–ª –∞–ø—Ä—É–≤", utils.CreateUserLink([]string{el.UserID}))})
	}

	reminders, err := repositories.ApprovalRemindersByID(approveID)

	for _, el := range *reminders {
		events = append(events, EventElement{
			Created: el.CreatedAt,
			Text:    fmt.Sprintf("üîî–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º, –∫—Ç–æ –Ω–µ –¥–∞–ª –æ—Ç–∫–ª–∏–∫", utils.CreateUserLink([]string{approval.AuthorID}))})
	}

	now := approval.CreatedAt
	halfTime := now.Add(time.Duration(approval.ConfirmTime/2) * time.Hour)
	quarterTime := now.Add(time.Duration(approval.ConfirmTime-approval.ConfirmTime/4) * time.Hour)
	if halfTime.Before(now) {
		events = append(events, EventElement{
			Text:    "üîî–ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏–ª –æ —Ç–æ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –≤—Å–µ–º –∫—Ç–æ –Ω–µ –¥–∞–ª –æ—Ç–∫–ª–∏–∫",
			Created: halfTime,
		})
	}
	if quarterTime.Before(now) {
		events = append(events, EventElement{
			Text:    "üîî–ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏–ª –æ —Ç–æ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —á–µ—Ç–≤–µ—Ä—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å–µ–º, –∫—Ç–æ –Ω–µ –¥–∞–ª –æ—Ç–∫–ª–∏–∫",
			Created: quarterTime,
		})
	}

	if !approval.CompletedAt.IsZero() {
		events = append(events, EventElement{
			Text:    "üèÅ–ê–ø—Ä—É–≤ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω",
			Created: approval.CompletedAt,
		})
	}

	text += FormatReport(events)
	return text, nil

}
func CollectStats(approveID int) (string, error) {
	var text string

	text += "üë•–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"

	approved, err := repositories.ApprovedUsersID(approveID)
	if err != nil {
		return "", err
	}
	approvedLinks := utils.CreateUserLink(approved)
	if err != nil {
		return "", err
	}

	if len(approvedLinks) != 0 {
		text += fmt.Sprintf("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∞–ø—Ä—É–≤: %s \n", approvedLinks)
	}

	rejected, err := repositories.RejectedUsersID(approveID)
	if err != nil {
		return "", err
	}
	rejectedLinks := utils.CreateUserLink(rejected)

	if len(rejectedLinks) != 0 {
		text += fmt.Sprintf("–û—Ç–∫–ª–æ–Ω–∏–ª–∏ –∞–ø—Ä—É–≤: %s \n", rejectedLinks)

	}

	notReacted, err := repositories.GetUsersNotReacted(approveID)
	if err != nil {
		return "", err
	}
	notReactedLinks := utils.CreateUserLink(notReacted)
	if len(notReacted) != 0 {
		text += fmt.Sprintf("–ù–µ –¥–∞–ª–∏ —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫: %s \n", notReactedLinks)
	}

	notReg, err := repositories.CheckNotRegisteredUsers(approveID)
	if err != nil {
		return "", err
	}
	if len(notReg) != 0 {
		text += fmt.Sprintf("–ï—â–µ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –º–Ω–µ: %s \n", strings.Join(notReg, ", "))
	}

	reminds, err := repositories.CountApprovalReminders(approveID)
	if err != nil {
		return "", err
	}

	text += "üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"

	text += fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: %d \n", reminds)
	if err != nil {
		return "", err
	}

	return text, nil

}

func CheckApprovalAccess(approvalID int, userID string) (bool, error) {
	approval, err := repositories.GetApprovalByID(approvalID)
	if err != nil {
		return false, err
	}

	if approval.AuthorID == userID {
		return true, nil
	}

	if approval.IsPrivate {
		return false, nil
	}

	err = postgres.GetDB().Preload("Participants").
		Where("id = ? AND is_private = ?", approvalID, false).
		First(&approval).Error
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return false, nil
		}
		return false, err
	}
	for _, participant := range approval.Participants {
		if participant.ID == userID {
			return true, nil
		}
	}
	return false, nil

}

// –°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞
func ReportApprovalText(approve *models.Approval) string {
	var exampleText string
	exampleText += fmt.Sprintf("%s", approve.Title)

	if len(approve.Description) != 0 {
		exampleText += "\n–û–ø–∏—Å–∞–Ω–∏–µ: " + approve.Description
	}
	authorLink := utils.CreateUserLink([]string{approve.AuthorID})
	exampleText += fmt.Sprintf("\n–û—Ç: %s", authorLink)

	months := []string{
		"—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω",
		"–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫",
	}
	ca := approve.CreatedAt
	exampleText += fmt.Sprintf("\n–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %02d %s %02d:%02d",
		ca.Day(), months[ca.Month()-1], ca.Hour(), ca.Minute())

	targetTime := approve.CreatedAt.Add(time.Duration(approve.ConfirmTime) * time.Hour)
	currentTime := time.Now()
	timeRemaining := int(targetTime.Sub(currentTime).Minutes())
	if timeRemaining >= 0 && approve.Status == models.StatusPending {
		exampleText += "\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: " + utils.FormatMinutes(timeRemaining)
	}
	if timeRemaining < 0 || approve.Status != models.StatusPending {
		exampleText += fmt.Sprintf("\n–°—Ç–∞—Ç—É—Å: %s", approve.Status)
	}

	if approve.Cancelable {
		exampleText += "\n–¢–∏–ø –∞–ø—Ä—É–≤–∞: –æ—Ç–∫–ª–æ–Ω—è–µ–º—ã–π"
		if approve.StopOnReject {
			exampleText += ", –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"
		}
		if !approve.StopOnReject {
			exampleText += ", –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"
		}
	}
	if !approve.Cancelable {
		exampleText += "\n–¢–∏–ø –∞–ø—Ä—É–≤–∞: –Ω–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º—ã–π"

	}

	if approve.Editable {
		exampleText += "\n–¢–∏–ø —Ñ–∞–π–ª–∞: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π, –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"
	}

	return exampleText

}
