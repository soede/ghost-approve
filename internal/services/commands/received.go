package commands

import (
	"errors"
	"fmt"
	"ghost-approve/internal/models"
	"ghost-approve/internal/repositories"
	"ghost-approve/internal/utils"
	"ghost-approve/pkg/db/postgres"
	"ghost-approve/pkg/vkbot"
	botgolang "github.com/mail-ru-im/bot-golang"
	"gorm.io/gorm"
	"log"
	"strings"
	"sync"
	"time"
)

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func Received(userID string, approvalID int) {
	if approvalID != 0 {
		approval, err := repositories.ReceivedApprovalByID(userID, approvalID)
		if errors.Is(err, gorm.ErrRecordNotFound) {
			err := vkbot.GetBot().NewTextMessage(userID, "–Ø –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç –∞–ø—Ä—É–≤. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω").Send()
			if err != nil {
				return
			}
		}
		if err != nil {
			log.Println(err)
		}

		if approval == nil {
			vkbot.GetBot().NewTextMessage(userID, "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∞–ø—Ä—É–≤ :(")
		}

		/*if approval.IsPrivate {
			answer := generatePrivateMessage(userID, approvalID)
			err := sendAll([]*botgolang.Message{answer})
			if err != nil {
				log.Println(err)
			}
			return
		}*/

		if err != nil {
			log.Println(err)
		}
		return

	}

	approvals, err := repositories.ReceivedApprovals(userID)
	if err != nil {
		log.Println(err)
		return
	}

	if len(approvals) == 0 {
		err := vkbot.GetBot().NewTextMessage(userID, "–£ —Ç–µ–±—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∞–ø—Ä—É–≤–æ–≤").Send()
		if err != nil {
			return
		}
		return
	}

	var wg sync.WaitGroup
	messageChan := make(chan *botgolang.Message, len(approvals))

	for _, approval := range approvals {

		if approval.AuthorID == userID {
			continue
		}

		wg.Add(1)

		go func(el models.Approval) {
			defer wg.Done()
			//–ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–∫—Ä—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–ø—Ä—É–≤
			if hidden, err := repositories.IsReportHiddenForUser(userID, el.ID); hidden && err == nil {
				return
			}

			//–ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ª–∏ –∞–ø—Ä—É–≤
			if el.IsPrivate {
				message := generatePrivateMessage(&el, userID)
				if el.Editable {

				}
				keyboard := botgolang.NewKeyboard()
				hide := botgolang.NewCallbackButton("–°–∫—Ä—ã—Ç—å", fmt.Sprintf("/manage_hide_%d", el.ID))
				keyboard.AddRow(hide)
				message.AttachInlineKeyboard(keyboard)

				messageChan <- message
				return
			}

			if err != nil {
				log.Println(err)
			}

			message := receivedApproveMessage(&el, userID)
			keyboard := botgolang.NewKeyboard()
			statistic := botgolang.NewCallbackButton("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", fmt.Sprintf("/manage_statistic_%d", el.ID))
			events := botgolang.NewCallbackButton("üïí –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π", fmt.Sprintf("/manage_events_%d", el.ID))
			hide := botgolang.NewCallbackButton("–°–∫—Ä—ã—Ç—å", fmt.Sprintf("/manage_hide_%d", el.ID))
			keyboard.AddRow(statistic, events)
			keyboard.AddRow(hide)

			message.AttachInlineKeyboard(keyboard)
			messageChan <- message

		}(*approval)

	}
	wg.Wait()

	go func() {
		wg.Wait()
		close(messageChan)
	}()

	var sendWg sync.WaitGroup
	for message := range messageChan {
		sendWg.Add(1)
		go func(msg *botgolang.Message) {
			defer sendWg.Done()
			err := msg.Send()
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			}
		}(message)
	}
	sendWg.Wait()

}

// –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∞–ø—Ä—É–≤—É
func generatePrivateMessage(approval *models.Approval, userID string) *botgolang.Message {
	message := vkbot.GetBot().NewMessage(userID)
	text := fmt.Sprintf("–ê–ø—Ä—É–≤ #%d", approval.ID) + "\n"
	text += approval.Title + "\n"
	if len(approval.Description) != 0 {
		text += "–û–ø–∏—Å–∞–Ω–∏–µ: " + approval.Description + "\n"
	}

	text += "–ê–≤—Ç–æ—Ä: " + utils.CreateUserLink([]string{approval.AuthorID}) + "\n"
	text += "–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + utils.FormatCreatedAt(&approval.CreatedAt) + "\n"
	response, err := userReaction(approval.ID, userID, approval.Editable)
	if err == nil {
		text += response + "\n"
	}
	text += "\n"
	text += "\nüîí–ê–≤—Ç–æ—Ä –∞–ø—Ä—É–≤–∞ —Ä–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
	var file *models.File
	result := postgres.GetDB().Where("approve_id = ?", approval.ID).First(&file)
	if result != nil && result.Error == nil {
		message.FileID = file.OriginalFileID
	}
	message.Text = text

	return message
}

func sendAll(messages []*botgolang.Message) (err error) {
	for _, message := range messages {
		err = message.Send()
	}
	return
}

// —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∞–ø—Ä—É–≤–∞
func receivedApproveMessage(approve *models.Approval, userID string) *botgolang.Message {
	exampleMessage := vkbot.GetBot().NewMessage(userID)
	var file *models.File
	result := postgres.GetDB().Where("approve_id = ?", approve.ID).First(&file)
	if result != nil && result.Error == nil {
		exampleMessage.FileID = file.FileID
	}

	exampleMessage.Text = receivedApproveText(approve, userID)
	keyboard := botgolang.NewKeyboard()

	exampleMessage.AttachInlineKeyboard(keyboard)
	return exampleMessage
}

// —Å–æ–±–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ /received
func receivedApproveText(approval *models.Approval, userID string) string {
	var exampleText string
	exampleText += fmt.Sprintf("–ê–ø—Ä—É–≤ #%d", approval.ID)
	exampleText += fmt.Sprintf("\n%s", approval.Title)

	if len(approval.Description) != 0 {
		exampleText += "\n–û–ø–∏—Å–∞–Ω–∏–µ: " + approval.Description
	}
	authorLink := utils.CreateUserLink([]string{approval.AuthorID})
	exampleText += fmt.Sprintf("\n–û—Ç: %s", authorLink)

	exampleText += fmt.Sprintf("\n–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", utils.FormatCreatedAt(&approval.CreatedAt))

	targetTime := approval.CreatedAt.Add(time.Duration(approval.ConfirmTime) * time.Hour)
	currentTime := time.Now()
	timeRemaining := int(targetTime.Sub(currentTime).Minutes())

	if timeRemaining <= 0 || approval.Status != models.StatusPending {
		exampleText += fmt.Sprintf("\n\n–°—Ç–∞—Ç—É—Å: %s", approval.Status)
	}
	if timeRemaining > 0 && approval.Status == models.StatusPending {
		exampleText += "\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: " + utils.FormatMinutes(timeRemaining)
	}

	if len(approval.Links) != 0 {
		exampleText += "\n–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: "

		exampleText += strings.Join(approval.Links, ", ")
	}

	if approval.Cancelable {
		exampleText += "\n–¢–∏–ø –∞–ø—Ä—É–≤–∞: –æ—Ç–∫–ª–æ–Ω—è–µ–º—ã–π"
		if approval.StopOnReject {
			exampleText += ", –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"
		}
		if !approval.StopOnReject {
			exampleText += ", –Ω–µ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"
		}
	}
	if !approval.Cancelable {
		exampleText += "\n–¢–∏–ø –∞–ø—Ä—É–≤–∞: –Ω–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º—ã–π"

	}

	if approval.Editable {
		exampleText += "\n–¢–∏–ø —Ñ–∞–π–ª–∞: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π, –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"
	}

	response, err := userReaction(approval.ID, userID, approval.Editable)
	if err == nil {
		exampleText += fmt.Sprintf("\n\n%s", response)
	}

	return exampleText

}

// –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–ø—Ä—É–≤
func userReaction(approvalID int, userID string, isEditable bool) (string, error) {
	var err error

	rejected, err := repositories.IsUserRejected(approvalID, userID)
	approved, err := repositories.IsUserApproved(approvalID, userID)

	if rejected {
		return "‚ùå–¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª —ç—Ç–æ—Ç –∞–ø—Ä—É–≤", nil
	}

	if approved {
		if isEditable {
			file, err := repositories.FileByUploader(userID, approvalID)
			if file != nil && err == nil {
				url, err := utils.FileUrlByID(file.FileID)
				if url != "" && err == nil {
					return fmt.Sprintf("üìù–¢—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —ç—Ç–æ—Ç –∞–ø—Ä—É–≤ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª: %s", url), nil
				}
			}
		}
		return "‚úÖ–¢—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —ç—Ç–æ—Ç –∞–ø—Ä—É–≤", nil
	}

	if err != nil {
		return "", err
	}
	return "–¢—ã –Ω–µ –¥–∞–ª –æ—Ç–∫–ª–∏–∫–∞ –ø–æ —ç—Ç–æ–º—É –∞–ø—Ä—É–≤—É", nil

}
